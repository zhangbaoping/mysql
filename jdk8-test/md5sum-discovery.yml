---
- hosts: 192.168.6.123
  remote_user: root
  vars:
    src_host_path: /home/jekins/.jenkins/workspace/test-yinuojr-ops/target
    dst_host_path: /data/backup/yinuojr-ops/target
    project_data_path: /bubidata/server/data
    project_backup_path: /data/backup
    project_name: yinuojr-ops
    service_run_port: 21019
    src_package_host_ip: 192.168.2.40
    dst_package_host_ip: 192.168.6.123
    random_number: "{{ 10000 | random }}"
    
  tasks:
    - name: create directory
      file: path={{ item }} state=directory
      with_items:
        - "{{ src_host_path }}"
        - "{{ dst_host_path }}"
        - "{{ project_backup_path }}"
        - "{{ project_name }}"
        - "{{ project_data_path }}"

    - wait_for: path={{ src_host_path }} state=present
    - wait_for: path={{ dst_host_path }} state=present
    - wait_for: path={{ project_backup_path }} state=present
    - wait_for: path={{ project_name }} state=present
    - wait_for: path={{ project_data_path }} state=present

    - name: check service status
      shell: "ps -ef|grep ops|grep -v grep |awk '{print $2}'"
      register: check_out_ops
    - debug: msg="{{check_out_ops.stdout_lines}}"

    - name: stop yinuojr_ops service
      shell: source /etc/profile && cd {{ project_data_path }}/{{ project_name }}/bin && ./launch stop

    - name: check yinuojr_ops service stop
      wait_for: port={{ service_run_port }} delay=3 state=stopped timeout=10

    - name: backup yinuojr_ops package 
      shell: mv {{ project_data_path }}/{{ project_name }} {{ project_backup_path }}/{{ project_name}}
    - wait_for: path={{ project_data_path }}/{{ project_name }} state=absent

    - name: delete package
      shell: rm -rf {{ project_backup_path }}/{{ project_name}} 

    - name: unarchive yinuojr_ops package
      unarchive: src={{ dst_host_path }}/{{ project_name }}.zip dest={{ project_data_path }} copy=yes

    - name: start yinuojr_ops service
      shell: source /etc/profile && cd {{ project_data_path }}/{{ project_name }}/bin && ./launch start

    - name: check service port status
      wait_for: port={{ service_run_port }} delay=5 state=started

    - name: service start
      shell: echo "Start Successful !!!"
