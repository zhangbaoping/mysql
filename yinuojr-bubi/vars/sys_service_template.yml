---
- hosts: "{{ host_ip }}"
  remote_user: "root"
  vars:
    src_host_path: "/data/backup/yinuojr-{{ service_name }}/target"
    dst_host_path: "/data/backup/yinuojr-{{ service_name }}/target"
    project_data_path: "/bubidata/server/data"
    project_backup_path: "/data/backup"
    project_name: "yinuojr-{{ service_name }}"
    project_run_port: "{{ service_port }}"
    project_new_package: "{{ /data/backup/newpackage/ }}"

  tasks:
    - file: 
        path: "{{ src_host_path }}"
        state: directory
    - file: 
        path: "{{ dst_host_path }}"
        state: directory
    - file:
        path: "{{ project_name }}" 
        state: directory  
    - file:
        path: "{{ project_backup_path }}"
        state: directory
    - file:
        path: "{{ project_data_path }}"
        state: directory

    - name: 判断服务是新增还是更新
      shell: 'if [ ! -d {{ project_data_path }}/{{ project_name }} ];then echo "new service";else echo "update service";fi' 
      register: result    
    - debug: msg="{{result.stdout}}"
    - set_fact: res="{{result.stdout}}"

    - name: 更新服务，停止服务
      shell: source /etc/profile && cd {{ project_data_path }}/{{ project_name }}/bin && ./launch stop
      when: (res == "update service")

    - name: 更新服务，检查端口是否关闭
      wait_for: port={{ project_run_port }} delay=3 state=stopped timeout=10
      when: (res == "update service")

    - name: 生成时间变量
      command: date +"%Y%m%d%H%M"
      register: date_output
    - debug: msg={{ date_output.stdout }}

    - name: 更新服务，备份现有服务程序
      shell: mv {{ project_data_path }}/{{ project_name}} {{ project_backup_path }}/{{ project_name }}.{{date_output.stdout}}
      when: (res == "update service")

    - name: 解压新文件到本地
      #unarchive: src={{ dst_host_path }}/{{ project_name }}.zip dest={{ project_data_path }}
      shell: mv {{ project_new_package }}/{{ project_name }} {{ project_data_path }}

    - name: 如果是API服务，拷贝备份文件pdf目录下的所有文件到本地pdf目录
      shell: rm -rf {{ project_data_path }}/{{ project_name}}/conf/pdf/ && cp -a {{ project_backup_path }}/{{ project_name }}.{{date_output.stdout}}/conf/pdf/ {{ project_data_path }}/{{ project_name}}/conf/
      when: ( service_name  == "api"  and  res == "update service" )

    - name: 启动服务程序
      shell: source /etc/profile && cd {{ project_data_path }}/{{ project_name }}/bin && ./launch start

    - debug: msg="{{ project_name }} 服务部署完成"
