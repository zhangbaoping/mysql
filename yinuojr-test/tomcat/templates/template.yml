---
- hosts: 192.168.5.100
  remote_user: root
  vars:
    src_host_path: "/home/jekins/.jenkins/workspace/{{ src_server_name }}/target"
    localhost_host_path: "/data/backup/yinuojr-{{ service_name }}/target"
    project_name: "yinuojr-{{ service_name }}"
    src_host_ip: "192.168.2.40"

  tasks:
    - file:
        path: "{{ localhost_host_path }}" 
        state: directory
    - file:
        path: "{{ project_name }}" 
        state: directory

    - name: 远程拷贝更新包到本地机器
      command: "scp root@{{ src_host_ip }}:{{ src_host_path }}/{{ project_name }}.zip {{ localhost_host_path }}"
    
    - name: 生成本地包MD5码
      shell: "md5sum {{ localhost_host_path }}/{{ project_name }}.zip|awk '{print $1}'"
      register: md5sum_local
    - debug: msg={{md5sum_local.stdout}}
    
    - name: 生成Jenkins源头包MD5码时间
      shell: ssh -o StrictHostKeyChecking=no root@{{ src_host_ip }} 'stat {{ src_host_path }}/{{ project_name }}.zip|grep "最近改动"|cut -d " " -f 1,2'
      register: md5_src_time
    - debug: msg="{{md5_src_time.stdout}}" 

    - name: 生成Jenkins源头包MD5码
      shell: "ssh -o StrictHostKeyChecking=no root@{{ src_host_ip }} md5sum {{ src_host_path }}/{{ project_name }}.zip|awk '{print $1}'"
      register: md5sum_src
    - debug: msg={{md5sum_src.stdout}}
    
    - name: 校验源头包和本地包的MD5码是否一致，一致输出md5sum right,不一致输出md5sum error
      shell: 'if [ "$md5sum_local" = "$md5sum_src" ];then echo "md5sum right";else echo "md5sum error";fi'
      register: result    
    - debug: msg="{{result.stdout}}"

- hosts: "{{ host_ip }}"
  remote_user: root
  vars:
    src_host_path: "/data/backup/yinuojr-{{ service_name }}/target"
    dst_host_path: "/data/backup/yinuojr-{{ service_name }}/target"
    project_data_path: "/bubidata/server/data"
    project_backup_path: "/data/backup"
    project_name: "yinuojr-{{ service_name }}"
    project_run_port: "{{ service_port }}"
    dst_host_ip: "192.168.6.123"
    
  tasks:
    - file: 
        path: "{{ src_host_path }}"
        state: directory
    - file: 
        path: "{{ dst_host_path }}"
        state: directory
    - file:
        path: "{{ project_backup_path }}"
        state: directory
    - file:
        path: "{{ project_name }}"
        state: directory
    - file:
        path: "{{ project_data_path }}"
        state: directory

    - name: 生成时间变量
      command: date +"%Y%m%d%H%M"
      register: date_output
    - debug: msg={{ date_output.stdout }}

    - name: 判断目录是否存在，不存在返回not exists，存在返回exists 
      shell: 'if [ ! -d {{ project_data_path }}/{{ project_name }} ] ; then echo "not exists" ; else echo "exists" ;fi' 
      ignore_errors: true
      register: result    
    - debug: msg="{{result.stdout}}"
    - set_fact: res="{{result.stdout}}"

    - name: 新增服务，解压文件
      unarchive: src={{ src_host_path }}/{{ project_name }}.zip dest={{ project_data_path }}
      when: ( res == "not exists")

    - name: 新增服务，启动服务
      shell: source /etc/profile && cd {{ project_data_path }}/{{ project_name }}/bin && ./launch start
      when: ( res == "not exists")

    - name: 更新服务，服务停止
      shell: source /etc/profile && cd {{ project_data_path }}/{{ project_name }}/bin && ./launch stop
      when: ( res == "exists")

    - name: 检查端口是否关闭
      wait_for: port={{ project_run_port }} delay=3 state=stopped timeout=10
      when: ( res == "exists")

    - name: 更新服务，备份现有服务程序
      shell: mv {{ project_data_path }}/{{ project_name}}  {{ project_backup_path }}/{{ project_name }}.{{date_output.stdout}}
      when: ( res == "exists")

    - name: 更新服务，解压文件
      unarchive: src={{ dst_host_path }}/{{ project_name }}.zip dest={{ project_data_path }}
      when: ( res == "exists")

    - name: 如果是API服务，拷贝/conf/pdf/目录下面的文件到更新后对应文件目录
      shell: rm -rf {{ project_data_path }}/{{ project_name}}/conf/pdf && cp -a {{ project_backup_path }}/{{ project_name }}.{{date_output.stdout}}/conf/pdf {{ project_data_path }}/{{ project_name}}/conf/
      when: ( service_name == "api" )

    - name: 更新服务，启动服务程序
      shell: source /etc/profile && cd {{ project_data_path }}/{{ project_name }}/bin && ./launch start
      when: ( res == "exists")

    - name: 更新服务完成，并打印输出端口
      shell: "netstat -ntlup|grep {{ project_run_port }}|awk -F':' '{print $4}'"
      register: port_output
    - debug: msg={{ port_output.stdout }}

      
